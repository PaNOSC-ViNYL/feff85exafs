## -*- python -*-
##
##  run this script in the t/materials/ folder as "larch -e unittest.lar"
##
add_plugin('f85ut')
import re
import sys
from   os.path   import isfile, join
from   termcolor import colored

#folders = ['Copper', 'NiO', 'UO2', 'Zircon', 'ferrocene', 'bromoadamantane']
folders = ['Copper', 'NiO', 'Zircon']

ok     = True
count  = 0
failed = list()

tests = dict()

for folder in folders:
    fut           = ut(folder)
    fut.verbose   = False
    fut.doplot    = False
    fut.doscf     = False
    tests[folder] = fut

    print "Running Feff on %s" % folder
    fut.run()

    ## test column comparisons for each path
    for path in fut.paths:
        index = int(path[4:8])
        ## lambda, caps, redfact, and rep don't change from path to path
        parts = ['feff', 'amp', 'phase', 'lambda', 'caps', 'redfact', 'rep'] if index==1 else ['feff', 'amp', 'phase']
        for part in parts:
            this = fut.compare(index, part=part)
            fut.okTrue('feff', this, "comparison of %s for path %d in %s" % (part, index, folder))
        end for
    end for

    ## test various values from the header of the feffNNNN.dat file
    fut.okTrue('feff', fut.feffterms(), "some feff terms calculated incorrectly for %s" % folder)

    ## test the calculation of s02
    fut.okTrue('feff', fut.s02() == fut.s02('baseline'), "s02 calculated incorrectly for %s" % folder)

    ## test fits to data
    if isfile(join(fut.path, fut.folder+'.py')):
        fut.fit()
        ## bestfit value and errorbars
        for p in fut.blfit.params.covar_vars:
           fut.okDiff('data',
                      getattr(getattr(fut.blfit.params, p), 'value') - getattr(getattr(fut.trfit.params, p), 'value'),
                      "fitting parameter %s evaluated inconsitently for %s" % (p, folder))

           fut.okDiff('data', 
                      getattr(getattr(fut.blfit.params, p), 'stderr') - getattr(getattr(fut.trfit.params, p), 'stderr'),
                      "uncertainty of %s evaluated inconsitently for %s" % (p, folder))
        end for
        ## chi_reduced, chi_square, rfactor
        for p in ['chi_reduced', 'chi_square', 'rfactor']:
            fut.okDiff('data', getattr(fut.blfit.params, p) - getattr(fut.trfit.params, p),
                       "%s evaluated inconsitently for %s" % (p, folder))
        end for
    end if

    fut.clean()
end for

for folder in folders:
    print "\n" + colored("%s: " % folder, 'yellow', attrs=['bold']) + \
        "%d tests (%d feff, %d data)" % (tests[folder].count,
                                         tests[folder].feffcount, tests[folder].datacount)
    if len(tests[folder].failed):
        if len(tests[folder].failed) > 1:
            word = 'tests'
        else:
            word = 'test'
        end if
        print colored("\tfailed %d %s" % (len(tests[folder].failed), word), 'red', attrs=['bold'])
        for failure in tests[folder].failed:
            print "\t\t" + failure
        end for
    else:
        print colored("\tpassed all tests" , 'green', attrs=['bold'])
    end if
end for
