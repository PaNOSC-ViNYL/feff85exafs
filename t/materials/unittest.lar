## -*- python -*-
add_plugin('f85ut')
import re
import sys
from   os.path   import isfile, join

#folders = ['Copper', 'NiO', 'UO2', 'Zircon', 'ferrocene', 'bromoadamantane']
folders = ['Copper', 'NiO']

ok     = True
count  = 0
failed = list()

for folder in folders:
    fut         = ut(folder)
    fut.verbose = False
    fut.doplot  = False
    fut.doscf   = False

    print "Running Feff on %s" % folder
    fut.run()

    ## test column comparisons for each path
    for path in fut.paths:
        index = int(path[4:8])
        ## lambda, caps, redfact, and rep don't change from path to path
        parts = ['feff', 'amp', 'phase', 'lambda', 'caps', 'redfact', 'rep'] if index==1 else ['feff', 'amp', 'phase']
        for part in parts:
            this = fut.compare(index)
            count += 1
            if not this:
                failed.append("comparison of %s for path %d in %s" % (part, index, folder))
                ok = False
            end if
        end for
    end for

    ## test various values from the header of the feffNNNN.dat file
    if not fut.feffterms():
        failed.append("some feff terms calculated incorrectly for %s" % folder)
        ok = False
    end if
    count += 1

    ## test the calculation of s02
    if fut.s02() != fut.s02('baseline'):
        failed.append("s02 calculated incorrectly for %s" % folder)
        ok = False
    end if
    count += 1

    ## test fits to data
    if isfile(join(fut.path, fut.folder+'.py')):
        fut.fit()
        ## bestfit value and errorbars
        for p in fut.blfit.params.covar_vars:
            count += 1
            if getattr(getattr(fut.blfit.params, p), 'value') - getattr(getattr(fut.trfit.params, p), 'value') > fut.epsilon:
                failed.append("fitting parameter %s evaluated inconsitently for %s" % (p, folder))
                ok = False
            end if
            count += 1
            if getattr(getattr(fut.blfit.params, p), 'stderr') - getattr(getattr(fut.trfit.params, p), 'stderr') > fut.epsilon:
                failed.append("uncertainty of %s evaluated inconsitently for %s" % (p, folder))
                ok = False
            end if
        end for
        ## chi_reduced, chi_square, rfactor
        for p in ['chi_reduced', 'chi_square', 'rfactor']:
            count += 1
            if getattr(fut.blfit.params, p) - getattr(fut.trfit.params, p) > fut.epsilon:
                failed.append("%s evaluated inconsitently for %s" % (p, folder))
                ok = False
            end if
        end for
    end if

    fut.clean()
end for

if ok:
    print "All %d tests passed!" % count
else:
    print "Failed %d/%d tests:" % (len(failed), count)
    for failure in failed:
        print "\t" + failure
    end for
end if
