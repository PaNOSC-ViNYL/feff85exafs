This directory contains the FEFF8.2 sourse code
----------------------------------------------------------------------
How to make various source codes and executables
04/04/2001 A. Ankudinov
----------------------------------------------------------------------
Use commands:
   make        - compiles sequential modular code (see script 'feff')
   make mpi    - compiles parallel modular code (see script 'feffmpi')
                 edit POT/Makefile to change number of processors
   make src    - generate sequential modular code  (files below)
                ff2x_tot.f    genfmt_tot.f  path_tot.f    rdinp_tot.f
                fms_tot.f     ldos_tot.f    pot_tot.f     xsph_tot.f
   make srcmpi - generate parallel modular code  (file above)
   make mono   - generate sequential monolithic code (feff_tot.f)
   make clean  - to switch between parallel and sequential version,
                 also to clean directories from *.o files

_______________________________________________________________________
Explanation of the  Directory Tree
04/04/2001 A. Ankudinov
-----------------------------------------------------------------------
Readme - general instructions (this file)
Makefile - how to make various  source codes and executables
install.txt - installation instructions
CVS   - code is maintained under CVS.
LIB - storage for compiled libraries
Test - fast tests for single processor
TestMPI - same tests for multiple processors
Utility - directory with several utilities
----------------------------
Directories with FORTRAN subroutines
----------------------------
ATOM  - single configuration atomic code subroutines
COMMON - set of general use routines to write warnings, headers,
          make string operations, etc..
DEBYE - Debye-Waller factors subroutines: correlated Debye model,
        equation of motion and recursion methods for DW factors;
EXCH  - various models (LDA, (HF+LDA)/2) for ground and EXCITED state
        exchange-correlation potential
FF2X - various spectroscopy calculations (absorption, emission, scattering)
FMS - full multiple scattering routines
FOVRG - finds regular and irregular solution of Dirac equation
        for spherically symmetric potential
GENFMT - Rehr-Albers scattering F-matrix routines
HEADERS - routines for the headers, written into output files
LDOS - DOS calculations
MATH - math routines: bessel fuctions, rotation matrices, 3j, etc..
PAR - parallel processing routines ( or dummy routines)
PATH - pathfinder
POT - routines for SCF calculation of potential
RDINP - reads feff.inp file and transform to standard (feffinp.xml ?)
XSPH - Matrix elements (E1,E2, M1) and t-matrix calculation

4/04/01  A. Ankudinov
-----------------------------------------------------------------------------
Specific instructions for test and use of modular code (make src; make srcmpi)
written by John. Rehr and  Jim Sims
------------------------------------------------------------------------------
For single processor runs, these may be copied, for example,
into the Test/mod subdirectory

The modules can be compiled using for various architectures using
the feff_comp.ARCH scripts, also in the Test/mod subdirectory.
These scripts will output executables into the ../bin
subdirectory, i.e., if you run a script in the Test/mod
directory, look for executables in the Test/bin subdirectory.
Sample input and output files are in the Test/Cu GaN and Gecl4 
subdirectories.

Analogously, for parallel execution, the source modules generated 
from

make -f Makefile.parallel src

may be copied, for example, into the TestMPI/mod subdirectory,
where there are feff_comp.ARCH scripts for ARCH=aix and
ARCH=sgi, and a Makefile for the more complicated case of a
Linux cluster using the Portland Group compilers and the public
domain LAM MPI library.

There also is a TestMPI/run.scripts directory to illustrate
how to run parallel jobs. In the simple case of an interactive
run, the script feffmpi.sgi is

#!/bin/csh -f
mpirun -np $1 ../bin/rdinp
mpirun -np $1 ../bin/ffmod1
mpirun -np $1 ../bin/ldos
mpirun -np $1 ../bin/ffmod2
mpirun -np $1 ../bin/ffmod3
mpirun -np $1 ../bin/ffmod4
mpirun -np $1 ../bin/ffmod5
mpirun -np $1 ../bin/ffmod6

and to run the job all one has to do is use

feffmpi.sgi <Number_of_processors>

This is pretty straightforward, i.e, its just 

mpirun -np <Number_of_processors> Module_to_run
for each module, and the script is there for convenience.

The feffmpi.aix and feffmpi.lam (Linux) scripts are
analogous, where AIX uses poe (Parallel Operating Environment)
instead of mpirun and Lam uses mpirun with a different
collection of parameters.

An additional complication arises for batch queues, where it
is probably best to consult your local batch queue expert.
Sample batch queuing scripts are provided for 16 processor runs
using NQS on an SGI (script.qsub.16), using IBM's LoadLeveler
(script.loadleveler.16), and using the free Linux PBS system
for a Linux cluster (script.pbs.16).


1/26/01  J. Rehr
2/08/01  J. Sims
