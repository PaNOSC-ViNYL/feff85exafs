## -*- python -*-
## feff85exafs build system based on scons
## see HEADERS/license.h for license information

import sys
sys.path.append('..')
from FeffBuild import CompilationEnvironment, InstallEnvironment
from distutils.spawn import find_executable
import os
from   os.path   import realpath, join

try:
    Import('env')
except:
    env  = CompilationEnvironment()
ienv = InstallEnvironment()

env['STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME'] = 1

## ------------------------------------------------------------------------------------------------------
## build libgenfmt: contains most of the functionality of genfmt
lib_src = ['genfmt_prep.f', 'fmtrxi.f', 'mmtr.f', 'mmtrxi.f', 'import.f',
           'rot3i.f', 'sclmz.f', 'setlam.f', 'snlm.f', 'xstar.f', 'trig.f']
env.SharedLibrary('libfeffgenfmt', lib_src)
env.Install(ienv['i_lib'], 'libfeffgenfmt.so')

bin_src = ['ffmod5.f', 'genfmt.f', 'rdpath.f']
env.Program('genfmt', ['regenf.f']+bin_src,
            FORTRANFLAGS = env['FORTRANFLAGS']+' -fPIC',
            OBJSUFFIX = env['SHOBJSUFFIX'],
            LIBS = ['feffgenfmt', 'feffcom', 'jsonfortran', 'feffjson', 'feffmath', 'feffpar'],
            LIBPATH = ['.', join('..','COMMON'), join('..','JSON'), join('..','MATH'), join('..','PAR')])
env.Install(ienv['i_bin'], 'genfmt')

## ------------------------------------------------------------------------------------------------------
## build the onepath fortran librtary
other_obj = [join('..','FF2X', 'fdtarr'      + env['SHOBJSUFFIX']), # called directly
             join('..','FF2X', 'fdthea'      + env['SHOBJSUFFIX']),
             join('..','RDINP','mkptz'       + env['SHOBJSUFFIX'])]
misc_feff = [join('..','COMMON','wlog'       + env['SHOBJSUFFIX']), # called indeirectly
             join('..','COMMON','chopen'     + env['SHOBJSUFFIX']),
             join('..','COMMON','getxk'      + env['SHOBJSUFFIX']),
             join('..','COMMON','padlib'     + env['SHOBJSUFFIX']),
             join('..','COMMON','pertab'     + env['SHOBJSUFFIX']),
             join('..','COMMON','pijump'     + env['SHOBJSUFFIX']),
             join('..','COMMON','rdxsph'     + env['SHOBJSUFFIX']),
             join('..','COMMON','setkap'     + env['SHOBJSUFFIX']),
             join('..','COMMON','str'        + env['SHOBJSUFFIX']),
             join('..','MATH',  'bcoef'      + env['SHOBJSUFFIX']),
             join('..','MATH',  'cwig3j'     + env['SHOBJSUFFIX']),
             join('..','MATH',  'dist'       + env['SHOBJSUFFIX']),
             join('..','MATH',  'rotwig'     + env['SHOBJSUFFIX']),
             join('..','MATH',  'trap'       + env['SHOBJSUFFIX']),
             join('..','PAR',   'sequential' + env['SHOBJSUFFIX'])]



onepath_src = ['onepath.f', 'pathgeom.f']  ## , 'read_onepath.f'
env.SharedLibrary('libonepath', onepath_src + other_obj + lib_src + misc_feff)
env.Install(ienv['i_lib'], 'libonepath.so')

## ------------------------------------------------------------------------------------------------------
## build the feffpath C wrapper around onepath
env.SharedLibrary('libfeffpath', ['feffpath.c'] + onepath_src + other_obj + lib_src + misc_feff)


env.Install(ienv['i_lib'], 'libfeffpath.so')



perl_wrapper_path = realpath(join('..', '..', 'wrappers', 'perl'))
## ------------------------------------------------------------------------------------------------------
## the C wrapper example needs the header file
if 'SUDO_UID' in os.environ.keys():
    env.InstallOwner(join(perl_wrapper_path, 'src'), 'feffpath.h', int(os.getenv('SUDO_UID')), int(os.getenv('SUDO_GID')))
    env.Install(ienv['i_inc'], 'feffpath.h')
else:
    env.Install([join(perl_wrapper_path, 'src'), ienv['i_inc']], 'feffpath.h')



## ------------------------------------------------------------------------------------------------------
## build the SWIG Perl wrapper

## FIXME:  find_executable needs an argument that works on all the platforms
##         perhaps 'import platform', then 'platform.system()'...

if find_executable("swig"):
    bld = Builder(action = 'swig -perl5 $SOURCE')
    env = Environment(BUILDERS = {'SwigPerl' : bld})
    env.SwigPerl(['feffpath_wrap.c', 'FeffPathWrapper.pm'], 'feffpath.i') # builder befined in FeffBuild.py
    Depends(['feffpath_wrap.c', 'FeffPathWrapper.pm'], 'feffpath.h')
    if 'SUDO_UID' in os.environ.keys():
        env.InstallOwner(join(perl_wrapper_path, 'src'),           'feffpath_wrap.c',   int(os.getenv('SUDO_UID')), int(os.getenv('SUDO_GID')))
        env.InstallOwner(join(perl_wrapper_path, 'lib', 'Xray/'), 'FeffPathWrapper.pm', int(os.getenv('SUDO_UID')), int(os.getenv('SUDO_GID')))
    else:
        env.Install(join(perl_wrapper_path, 'src'),          'feffpath_wrap.c')
        env.Install(join(perl_wrapper_path, 'lib', 'Xray/'), 'FeffPathWrapper.pm')
else:
    print "\nSWIG not installed, skipping perl wrapper for libfeffpath in GENFMT\n"

env.Alias('install', [join(perl_wrapper_path, 'src'), join(perl_wrapper_path, 'lib', 'Xray/'),
                      ienv['i_lib'], ienv['i_bin'], ienv['i_inc'] ])
