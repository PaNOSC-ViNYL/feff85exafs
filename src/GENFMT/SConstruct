## -*- python -*-
## feff85exafs build system based on scons
## see HEADERS/license.h for license information

import sys
sys.path.append('..')
from FeffBuild import CompilationEnvironment, InstallEnvironment
from distutils.spawn import find_executable
import os
from   os.path   import realpath, join


env  = CompilationEnvironment()
ienv = InstallEnvironment()

## ------------------------------------------------------------------------------------------------------
## build libgenfmt: contains most of the functionality of genfmt
lib_src = ['genfmt_prep.f', 'fmtrxi.f', 'mmtr.f', 'mmtrxi.f', 'import.f',
           'rot3i.f', 'sclmz.f', 'setlam.f', 'snlm.f', 'xstar.f', 'trig.f']
env.StaticLibrary('libfeffgenfmt', lib_src)
env.Install(ienv['i_lib'], 'libfeffgenfmt.a')

## ------------------------------------------------------------------------------------------------------
## build the genfmt standalone program
bin_src = ['ffmod5.f', 'genfmt.f', 'rdpath.f']
env.Program('genfmt', ['regenf.f']+bin_src, \
            LIBS = ['feffgenfmt', 'feffcom', 'jsonfortran', 'feffjson', 'feffmath', 'feffpar'], \
            LIBPATH = ['.', join('..','COMMON'), join('..','JSON'), join('..','MATH'), join('..','PAR')])
env.Install(ienv['i_bin'], 'genfmt')

## ------------------------------------------------------------------------------------------------------
## build the onepath fortran librtary
onepath_src = ['onepath.f', 'pathgeom.f']  ## , 'read_onepath.f'
other_obj = [join('..','FF2X','fdtarr.o'), join('..','FF2X','fdthea.o'), join('..','RDINP','mkptz.o')]
env.StaticLibrary('libonepath', onepath_src + other_obj)
env.Install(ienv['i_lib'], 'libonepath.a')

## ------------------------------------------------------------------------------------------------------
## build the feffpath C wrapper around onepath
env.StaticLibrary('libfeffpath', 'feffpath.c')
env.Install(ienv['i_lib'], 'libfeffpath.a')

## ------------------------------------------------------------------------------------------------------
## build the test program for the C wrapper
env.Program('makepath', 'makepath.c', \
            LIBS = ['feffpath', 'onepath', 'feffgenfmt', 'feffcom', 'feffmath', 'feffpar', 'gfortran', 'm'], \
            LIBPATH = ['.', join('..','COMMON'), join('..','MATH'), join('..','PAR')])

## ------------------------------------------------------------------------------------------------------
## build the SWIG Perl wrapper

## FIXME:  find_executable needs an argument that works on all the platforms
##         perhaps 'import platform', then 'platform.system()'...
if find_executable("swig"):
    bld = Builder(action = 'swig -perl5 $SOURCE')
    env = Environment(BUILDERS = {'SwigPerl' : bld})
    env.SwigPerl(['feffpath_wrap.c', 'FeffPathWrapper.pm'], 'feffpath.i') # builder befined in FeffBuild.py
    Depends(['feffpath_wrap.c', 'FeffPathWrapper.pm'], 'feffpath.h')
    if 'SUDO_UID' in os.environ.keys():
        env.InstallOwner('../../wrappers/perl/src/',      ['feffpath.h', 'feffpath_wrap.c'], int(os.getenv('SUDO_UID')), int(os.getenv('SUDO_GID')))
        env.InstallOwner('../../wrappers/perl/lib/Xray/', 'FeffPathWrapper.pm',              int(os.getenv('SUDO_UID')), int(os.getenv('SUDO_GID')))
    else:
        env.Install('../../wrappers/perl/src/',      ['feffpath.h', 'feffpath_wrap.c'])
        env.Install('../../wrappers/perl/lib/Xray/', 'FeffPathWrapper.pm')
else:
    print "\nSWIG not installed, skipping perl wrapper for libfeffpath in GENFMT\n"

perl_wrapper_path = realpath(join('..', '..', 'wrappers', 'perl'))
env.Alias('install', [join(perl_wrapper_path, 'src'), join(perl_wrapper_path, 'lib', 'Xray/'),
                      ienv['i_lib'], ienv['i_bin'] ])
