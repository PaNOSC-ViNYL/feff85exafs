## -*- python -*-
## feff85exafs build system based on scons
## see HEADERS/license.h for license information

import sys
sys.path.append('..')
from FeffBuild import CompilationEnvironment, InstallEnvironment, FindOtherObjects
from distutils.spawn import find_executable
import os, re
from   os.path   import realpath, join, isdir

try:
    Import('env')
except:
    env  = CompilationEnvironment()
here = os.getcwd()
ienv = InstallEnvironment()

if env['FORTRAN'] == 'gfortran':
    env = Environment(F90FLAGS = '-O2 -fbacktrace -g -Wall -Wextra -Wno-maybe-uninitialized -fdiagnostics-color=auto -J'+here,)
    # -pedantic chokes on declaration of double complex in the horrific padio and elsewhere
    # several "Unused dummy argument" warnings remain: padio, iomod, and atomicpotio
elif env['FORTRAN'] == 'ifort':
    env = Environment(F90FLAGS = '-O2 -warn -stand f08 -diag-disable 7601 -traceback -module '+here,)

lib_src = [
    'eps.f90',
    'getelement.f90',
    'oca_atomicpotio.f90',
    'oca_atoms_inp.f90',
    'oca_compton_inp.f90',
    'oca_constants.f90',
    'oca_controls.f90',
    'oca_dimsmod.f90',
    'oca_eels_inp.f90',
    'oca_errorfile.f90',
    'oca_errormod.f90',
    'oca_ff2x_inp.f90',
    'oca_fms_inp.f90',
    'oca_genfmt_inp.f90',
    'oca_geometry_inp.f90',
    'oca_global_inp.f90',
    'oca_iofiles.f90',
    'oca_iomod.f90',
    'oca_kinds.f90',
    'oca_kklist.f90',
    'oca_ldos_inp.f90',
    'oca_mtdp.f90',
    'oca_opcons_inp.f90',
    'oca_padio.f90',
    'oca_par.f90',
    'oca_paths_inp.f90',
    'oca_potential_inp.f90',
    'oca_screen_inp.f90',
    'oca_sfconv_inp.f90',
    'oca_strfacs.f90',
    'oca_struct.f90',
    'oca_xsph_inp.f90',
    'oca_reciprocal_inp.f90',
]


#deps = ('COMMON/wlog', 'COMMON/str', 'COMMON/pertab', 'COMMON/getxk', 'COMMON/rdxsph',
#        'COMMON/setkap', 'COMMON/chopen', 'COMMON/padlib',
#        'PAR/sequential', 'MATH/trap', 'MATH/bcoef', 'MATH/cwig3j', 'MATH/rotwig')

env.Library('libfeffopconsat', lib_src) # + FindOtherObjects(deps, env))
#env.SharedLibrary('libfeffopconsat', lib_src) # + FindOtherObjects(deps, env))


bin_src = ['opconsat.f90']
libs = ['libfeffopconsat' + env['LIBSUFFIX'],
#        join('..', 'json-fortran', 'libjsonfortran.a'),
        join('..', 'COMMON', 'libfeffcom.a'),
        join('..', 'PAR',    'libfeffpar.a'),
        join('..', 'MATH',   'libfeffmath.a'),
#        join('..', 'JSON',   'libfeffjson.a'),
    ]


env.Program('opconsat', bin_src+libs)
env.Install(ienv['i_bin'], 'opconsat'+env['PROGSUFFIX'])
